<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Eduard Luhtonen]]></title>
  <link href="http://luhtonen.github.com/atom.xml" rel="self"/>
  <link href="http://luhtonen.github.com/"/>
  <updated>2013-03-14T16:07:53+02:00</updated>
  <id>http://luhtonen.github.com/</id>
  <author>
    <name><![CDATA[Eduard Luhtonen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How make Java to trust self signed certificate]]></title>
    <link href="http://luhtonen.github.com/blog/2013/03/14/how-make-java-to-trust-self-signed-certificate/"/>
    <updated>2013-03-14T15:24:00+02:00</updated>
    <id>http://luhtonen.github.com/blog/2013/03/14/how-make-java-to-trust-self-signed-certificate</id>
    <content type="html"><![CDATA[<p>We&#8217;ve been doing update to our customers systems and one of the part what was update Java to new version. With the update we&#8217;ve lost our <em>cacerts</em> file. In result Java stopped to trust our self signed certificate: <code>The certificate issued by &lt;..&gt; is not trusted;</code></p>

<p>To resolve this issue, we needed to add self signed certifate to Java&#8217;s trusted certificate list.</p>

<pre>
> sudo su -
> cd <i>install_directory</i>
> mkdir certs
> openssl s_client -connect <i>remote_host</i>:<i>remote_port</i> 2>&1 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > certs/certfile.txt
> cp java/jre/lib/security/cacerts java/jre/lib/security/cacerts-`date -u +"%Y%m%d"`
> java/jre/bin/keytool -import -noprompt -trustcacerts -alias "mycert" -file certs/certfile.txt -keystore java/jre/lib/security/cacerts -storepass changeit
</pre>


<h4>Explanations</h4>

<ol>
<li>Since we have our tool installed as <em>root</em>, we need to <em>sudo</em> as <em>root</em></li>
<li>Change to tool installation directory, replace <em>install_directory</em> with correct value. Java was installed under it in <em>java</em> subdirectory.</li>
<li>Create directory to store certificate to be downloaded from  remote host</li>
<li>Download certificate from remote host and store it in <em>certs</em> directory in <em>certfile.txt</em> file. <em>remote_host</em> need to be replaced with correct host name or ip addres and <em>remote_port</em> need to be replaced with correct port.</li>
<li>Make backup of <em>cacerts</em> file</li>
<li>Add self signed certificate to <em>cacerts</em> file. Here&#8217;s some important options:</li>
</ol>


<p><em>-noprompt</em> - suppress interactive prompting</p>

<p><em>-trustcerts</em> - set certificate trust attribute to yes and don&#8217;t ask from user</p>

<p><em>-alias &#8220;alias_name&#8221;</em> - is alias used by keytool to find certificate from the list, if alias is already in the list certificate value is replace, otherwise new certificate is added to the <em>cacerts</em> file</p>

<p><em>-storepass pass</em> - password for key store, <em>changeit</em> is default</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to contribute to existing Octopress blog from other computer (Windows)]]></title>
    <link href="http://luhtonen.github.com/blog/2013/03/14/how-to-contribute-to-existing-octopress-blog-from-other-computer/"/>
    <updated>2013-03-14T13:42:00+02:00</updated>
    <id>http://luhtonen.github.com/blog/2013/03/14/how-to-contribute-to-existing-octopress-blog-from-other-computer</id>
    <content type="html"><![CDATA[<p>I&#8217;ve created my blog from my home Mac, but sometimes I wanted to add some brief posts from the work Windows computer, when thing I wanted to add is still fresh in my memory. I was wondering how can I do it? I found helpful article from <a href="http://code.dblock.org/octopress-setting-up-a-blog-and-contributing-to-an-existing-one">dBlog.org</a>. Last part was particularly helpful, but those instructions are for Linux/Unix/Mac users and didn&#8217;t worked for me right away, but I have to do some extra steps.</p>

<h2>Install Ruby for Windows</h2>

<p>First need to install ruby. I&#8217;ve used <a href="http://rubyinstaller.org/">RubyInstaller for Windows</a> to install latest version. This is pretty streight forward and shouldn&#8217;t cause any problems.</p>

<h2>Install GitHub for Windows</h2>

<p>It is possible to install just git, but I&#8217;ve encountered some problems with connection to GitHub: <code>Permission denied (publickey)</code>. Of cause it possible to generate this key using openssh and add it to your GitHub account&#8217;s key list. But I dicided to use native <a href="http://windows.github.com/">GitHub for Windows</a>, which handled all this issues for me automatically.</p>

<ol>
<li>Download and install GitHub for Windows</li>
<li>Start GitHub and login using your GitHub account</li>
<li>Set your username and email: select <em>tools</em> > <em>options&#8230;</em>, under &#8217;<em>git configuration</em>&#8217; check that your <em>username</em> and <em>email</em> are correct</li>
<li>Define where your projects will be cloned, select <em>tools</em> > <em>options&#8230;</em> and change &#8217;<em>default storage directory</em>&#8217; to one you prefer. I&#8217;ve used default, so for me it is optional step</li>
<li>Define what shell you&#8217;ll prefer to use: select <em>tools</em> > <em>options&#8230;</em> and select one you prefer from &#8217;<em>default shell</em>&#8217; list. I&#8217;ve tried <em>PowerShell</em> first, but there was some problems with it, so I switched to <em>Git Bash</em>.</li>
</ol>


<h2>Clone your blog from GitHub</h2>

<p>I&#8217;ve started cloning from GitHub Windows app and then switched to shell.</p>

<ol>
<li>From left panel in GitHub app select your account under <em>github</em> section</li>
<li>Select your blog repository and click <em>clone</em></li>
<li>When clone is complete select <em>open this repo</em></li>
<li>Start shell by selecting <em>tools</em> > <em>open a shell here</em></li>
<li>From this step on everything will be done in shell. First all required ruby gems need to be installed: <code>bundle install</code></li>
<li>From here I&#8217;ve followed instructions from <a href="http://code.dblock.org/octopress-setting-up-a-blog-and-contributing-to-an-existing-one">dBlog.org</a> article&#8217;s last part except cloning, since it was already done:</li>
</ol>


<pre>
username.github.com$ git checkout source
username.github.com$ mkdir _deploy
username.github.com$ cd _deploy
username.github.com/_deploy$ git init
username.github.com/_deploy$ git remote add origin git@github.com:username/username.github.com.git
username.github.com/_deploy$ git pull origin master
username.github.com/_deploy$ cd ..
username.github.com$
</pre>


<h2>Creating new post</h2>

<p>Now I was ready to post my new post and I did it as following:</p>

<ol>
<li><code>rake new_post["Post Title"]</code></li>
<li>edit post, I&#8217;m using <a href="http://markdownpad.com/">MarkdownPad for Windows</a></li>
<li><code>rake generate</code></li>
<li><code>rake deploy</code></li>
<li><code>git add .</code></li>
<li><code>git commit -m 'some comments'</code></li>
<li><code>git push origin source</code></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to check AIX version and other useful information]]></title>
    <link href="http://luhtonen.github.com/blog/2013/01/22/how-to-check-aix-version-and-other-useful-information/"/>
    <updated>2013-01-22T19:22:00+02:00</updated>
    <id>http://luhtonen.github.com/blog/2013/01/22/how-to-check-aix-version-and-other-useful-information</id>
    <content type="html"><![CDATA[<p>I was sending technical request to our support team and needed to find out what is a version of operating system. I&#8217;ve been working with many different Unix/Linux flavors and always used <code>uname -a</code>. I was surpised to find out that on AIX this command shows OS version only with 1 digit.</p>

<p>I&#8217;ve already noticed that since AIX default shell is KSH, some things are done differently on it. After a brief research I&#8217;ve found command which would produce information I needed: <code>oslevel</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; oslevel -g
</span><span class='line'>Fileset                                 Actual Level        Maintenance Level
</span><span class='line'>-----------------------------------------------------------------------------
</span><span class='line'>bos.rte                                 7.1.1.16            7.1.0.0</span></code></pre></td></tr></table></div></figure>


<p>In IBM&#8217;s <a href="http://pic.dhe.ibm.com/infocenter/aix/v7r1/index.jsp?topic=%2Fcom.ibm.aix.cmds%2Fdoc%2Faixcmds4%2Foslevel.htm">AIX 7.1 Information Center</a> can find more information about this command and many other.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create simple GWT project with Eclipse]]></title>
    <link href="http://luhtonen.github.com/blog/2013/01/09/create-simple-gwt-project-with-eclipse/"/>
    <updated>2013-01-09T17:27:00+02:00</updated>
    <id>http://luhtonen.github.com/blog/2013/01/09/create-simple-gwt-project-with-eclipse</id>
    <content type="html"><![CDATA[<p>Google Web Toolkit is one of popular web UI development frameworks and I&#8217;ve decided to dig into it. There is different ways of creating GWT project: command line tools or even manually creating every bit of it, but I prefer to use IDE for my development work. Even I don&#8217;t see Eclipse as IDE, but it&#8217;s better than command line tools. But even when Google officially support Eclipse as it&#8217;s primer tool for Android and GWT development, GWT plugin doesn&#8217;t provide straight way of creating simple GWT project, but you have to make few steps to achieve it.</p>

<h2>Preparation</h2>

<p>To create GWT project with Eclipse, need to download and install <a href="http://www.oracle.com/technetwork/java/index.html">Java</a> and <a href="http://www.eclipse.org/downloads/">Eclipse</a> and then GWT plugin for Eclipse.</p>

<ol>
<li>start Eclipse</li>
<li>select menu Help > Eclipse Marketplace…</li>
<li>in Find field type: GWT and press GO</li>
<li>search for your version of Google Plugin for Eclipse and press Install button</li>
<li>follow on screen instructions and install plugin</li>
</ol>


<p>There would be added GWT button to Eclipse toolbar.</p>

<p><img src="http://luhtonen.github.com/images/new-gwt-project/gwt-button.png" alt="GWT button on Eclipse toolbar" /></p>

<p>In order to create simple project we need to execute 4 steps:</p>

<ol>
<li>Create GWT project</li>
<li>Define GWT module</li>
<li>Add an entry point class</li>
<li>Provide web page</li>
</ol>


<h2>Create GWT Project</h2>

<p>Now we&#8217;re ready to create our first, I wouldn&#8217;t be original, HelloWorld GWT project.</p>

<ol>
<li>click on GWT button and select New Web Application Project…
<img src="http://luhtonen.github.com/images/new-gwt-project/create-new-gwt-project.png" alt="Create New Web Application Project…" /></li>
<li>type Project name: HelloWorld</li>
<li>choose Package</li>
<li>select GWT SDK, default is good</li>
<li>deselect Use Google App Engine, it wouldn&#8217;t be needed for this project</li>
<li>&#8216;Add support for listing on Google Apps Marketplace&#8217; is deselecte by default and this is ok</li>
<li>deselect &#8216;Generate project sample code&#8217; since it wouldn&#8217;t be needed and would only mess with our project
<img src="http://luhtonen.github.com/images/new-gwt-project/new-gwt-project.png" alt="New GWT project screen" /></li>
<li>click Finish</li>
</ol>


<p>We would have simple empty GWT project in Project Explorer.
<img src="http://luhtonen.github.com/images/new-gwt-project/gwt-empty-project.png" alt="Empty GWT Project" /></p>

<p>There is 2 important directories in this project:</p>

<ul>
<li><code>src</code> with empty base package; there would be placed module configuration file and all Java classes would be put also there</li>
<li><code>war</code> were would be located HTML pages</li>
</ul>


<h2>Define GWT Module</h2>

<p>Now we need to define module for our GWT project. We can create as many modules for one project as we like, it would be useful for example for complex projects to devide functionality and responsibilities between modules and to enabling easier cooperation in bigger development teams. But for our project and generally for any simple project one module would be enough.</p>

<ol>
<li>select base package under src directory</li>
<li>from menu select File > New > Other and then under Google Web Toolkit select Module (or you can use mouse right click and skip File part) and click Next
<img src="http://luhtonen.github.com/images/new-gwt-project/new-gwt-module-selection.png" alt="Select New GWT Module" /></li>
<li>Source folder and Package should be selected automatically</li>
<li>give Module name: HelloWorld and click Finish
<img src="http://luhtonen.github.com/images/new-gwt-project/create-new-gwt-module.png" alt="Create New GWT Module" /></li>
</ol>


<p>Module configuration file <code>HelloWorld.gwt.xml</code> and empty <code>.client</code> package would be added to our base package.</p>

<p><img src="http://luhtonen.github.com/images/new-gwt-project/new-gwt-module.png" alt="Module creation elements" /></p>

<h2>Add an Entry Point Class</h2>

<p>Now we need to add entry point class to our project. We can have multiple entry points, but only one can be &#8216;active&#8217; at a time. So in most cases one entry point would be enough.</p>

<ol>
<li>select base package under src directory</li>
<li>from menu select File > New > Other and then under Google Web Toolkit select Entry Point Class and press Next
<img src="http://luhtonen.github.com/images/new-gwt-project/select-entry-point.png" alt="Select new entry point class" /></li>
<li>Source folder, Module and Package would be selected automatically</li>
<li>give class a Name: HelloWorld and press Finish</li>
<li>add following code in new class method <code>onModuleLoad()</code>:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RootPanel</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Label</span><span class="o">(</span><span class="s">&quot;Hello, World!&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember to fix imports</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.google.gwt.user.client.ui.Label</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.gwt.user.client.ui.RootPanel</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Provide the Web Page</h2>

<p>Last thing we need is HTML page to be shown to end users.</p>

<ol>
<li>select war directory</li>
<li>from menu select File > New > Other and then under Google Web Toolkit select HTML Page and press Next
<img src="http://luhtonen.github.com/images/new-gwt-project/select-new-html-page.png" alt="Select HTML Page" /></li>
<li>Project and Path should be already selected</li>
<li>give File name: HelloWorld and press Finish
<img src="http://luhtonen.github.com/images/new-gwt-project/create-new-web-page.png" alt="Create new HTML Page" /></li>
<li>some plugins generate link to javascript source incorrectly, it need to be fixed to <code>&lt;base package&gt;.&lt;module name&gt;/&lt;base package&gt;.&lt;page name&gt;.nocache.js</code>, for example <code>org.edu.gwt.helloworld.HelloWorld/org.edu.gwt.helloworld.HelloWorld.nocache.js</code></li>
</ol>


<p>Now our project is ready.</p>

<h2>Run Application</h2>

<p>Now we need to test our new application.</p>

<ol>
<li>select project top level</li>
<li>from run menu select Run As > Web Application
<img src="http://luhtonen.github.com/images/new-gwt-project/run-as.png" alt="Run as web application" /></li>
<li>copy URL and paste into browser, this may take awhile, and it would request to install browser plugin</li>
<li>after awhile on page should appear text &#8216;Hello, World!&#8217;</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging with Octopress on GitHub]]></title>
    <link href="http://luhtonen.github.com/blog/2013/01/09/blogging-with-octopress-on-github/"/>
    <updated>2013-01-09T09:51:00+02:00</updated>
    <id>http://luhtonen.github.com/blog/2013/01/09/blogging-with-octopress-on-github</id>
    <content type="html"><![CDATA[<p>This post is just a reminder to myself, how to publish new posts to my blog.</p>

<ol>
<li><code>rake new_post["Post Title"]</code></li>
<li>edit post</li>
<li><code>rake generate</code></li>
<li><code>rake deploy</code></li>
<li><code>git add .</code></li>
<li><code>git commit -m 'some comments'</code></li>
<li><code>git push origin source</code></li>
</ol>


<p>Step 1: creates new post</p>

<p>Step 3: generate blog post from the source</p>

<p>Step 4: deploy generated post to blog hosted on GitHub</p>

<p>Step 5: add new post to version control</p>

<p>Step 6: commit changes to local repository</p>

<p>Step 7: push source to GitHub</p>
]]></content>
  </entry>
  
</feed>
